import {
  CacheType,
  ChatInputCommandInteraction,
  PermissionFlagsBits,
  SlashCommandBuilder,
  User,
} from "discord.js";
import { Command } from "../command";
import { AstraLuna } from "../client";
import { BEmbed } from "../components/discord/Embed";
import { GuildDatabases } from "../components/astra/astraDBManager";
class Reputation implements Command {
  public data: SlashCommandBuilder = new SlashCommandBuilder();
  public interaction: ChatInputCommandInteraction | null = null;
  public client: AstraLuna | null = null;
  private comment: string | null = null;
  private user: User | null = null;
  private database: GuildDatabases | null = null;

  constructor() {
    this.data
      .setName("reputa√ß√£o")
      .setDescription("‚ñ∫ De uma reputa√ß√£o...")
      .addSubcommand((sub) =>
        sub
          .setName("ajuda")
          .setDescription("‚ñ∫ Caso voc√™ n√£o entenda como funciona...")
      )
      .addSubcommand((sub) =>
        sub
          .setName("remover")
          .setDescription("‚ñ∫ Adicione pontos negativos para um usu√°rio...")
          .addUserOption((usr) =>
            usr
              .setName("usu√°rio")
              .setDescription("‚ñ∫ Usu√°rio...")
              .setRequired(true)
          )
          .addStringOption((string) =>
            string
              .setName("coment√°rio")
              .setDescription("‚ñ∫ Coment√°rio..?")
              .setRequired(true)
          )
      )
      .addSubcommand((sub) =>
        sub
          .setName("blacklist")
          .setDescription("‚ñ∫ D√™ um shadowban em um usu√°rio malandro!")
          .addUserOption((s) =>
            s
              .setName("usu√°rio")
              .setDescription("‚ñ∫ Usu√°rio para entrar na blacklist")
              .setRequired(true)
          )
      )
      .addSubcommand((sub) =>
        sub
          .setName("whitelist")
          .setDescription("‚ñ∫ Remova usu√°rios da blacklist do seu servidor!")
          .addUserOption((s) =>
            s
              .setName("usu√°rio")
              .setDescription("‚ñ∫ Usu√°rio para remover da blacklist")
              .setRequired(true)
          )
      )
      .addSubcommand((sub) =>
        sub
          .setName("adicionar")
          .setDescription("‚ñ∫ Adicione pontos positivos para um usu√°rio...")
          .addUserOption((usr) =>
            usr
              .setName("usu√°rio")
              .setDescription("‚ñ∫ Usu√°rio...")
              .setRequired(true)
          )
          .addStringOption((string) =>
            string
              .setName("coment√°rio")
              .setDescription("‚ñ∫ Coment√°rio..?")
              .setRequired(true)
          )
      )
      .addSubcommand((sub) =>
        sub
          .setName("ver")
          .setDescription("‚ñ∫ Veja uma lista de coment√°rios sobre um usu√°rio...")
          .addUserOption((usr) =>
            usr
              .setName("usu√°rio")
              .setDescription("‚ñ∫ Usu√°rio...")
              .setRequired(true)
          )
      );
  }

  setClient(client: AstraLuna) {
    this.client = client;
    return this;
  }

  setInteraction(interaction: ChatInputCommandInteraction<CacheType>) {
    this.interaction = interaction;
    return this;
  }

  setDatabase() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");
    this.database = new GuildDatabases({ guild_id: this.interaction?.guildId });
  }

  permissionCheck() {
    if (!this.interaction || !this.client) {
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");
    }

    const User = this.interaction.guild?.members.cache.get(
      this.interaction.user.id
    );
    if (!User?.permissions.has(PermissionFlagsBits.Administrator)) return false;
    return true;
  }

  setMisc() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");

    this.comment = this.interaction.options.getString("coment√°rio");
    this.user = this.interaction.options.getUser("usu√°rio");
  }

  async ajuda() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");

    return this.interaction.reply({
      ephemeral: true,
      embeds: [
        new BEmbed()
          .setAuthor({ name: "Se√ß√£o de ajuda" })
          .setDescription(
            "O sistema de reputa√ß√£o foi feito com a inten√ß√£o de ajudar pessoas que vendem/trocam items dentro do servidor a passar maior confian√ßa para o outro usu√°rio."
          )
          .addFields(
            {
              name: "O sistema de coment√°rios",
              value:
                "O sistema de coment√°rios tem foco em deixar um feedback sobre a venda/troca para outros usu√°rios.\n",
            },
            {
              name: 'O sistema de "Anti-Rep Bombing"',
              value:
                "Para ter um melhor equil√≠brio entre as reputa√ß√µes, usu√°rios que derem 3 pontos de reputa√ß√£o negativa em menos uma hora ser√£o punidos automaticamente.\n",
            },
            {
              name: "O sistema de Fator de Confian√ßa",
              value:
                "Todo usu√°rio tem uma porcentagem% de confian√ßa, caso tenha mais pontos de reputa√ß√£o ruins do que boas, essa porcentagem cai, caso contr√°rio, sobe.\nQuando um usu√°rio tem uma porcentagem% de reputa√ß√£o muito baixa, um aviso √≥bvio ser√° emitido ao lado de sua porcentagem% de confian√ßa.\n",
            },
            {
              name: "/reputa√ß√£o adicionar <usu√°rio> (Slash Command)",
              value:
                "Esse comando √© utilizado para adicionar pontos de reputa√ß√£o para um usu√°rio",
            },
            {
              name: "/reputa√ß√£o remover <usu√°rio> (Slash Command)",
              value:
                "Esse comando √© utilizado para remover pontos de reputa√ß√£o para um usu√°rio",
            },
            {
              name: "/reputa√ß√£o coment√°rios <usu√°rio> (Slash Command)",
              value:
                "Esse comando √© utilizado para ver informa√ß√µes de reputa√ß√£o para um usu√°rio",
            }
          )
          .setColor("Blurple")
          .setThumbnail(this.interaction.user.avatarURL()),
      ],
    });
  }

  async blacklist() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");
    await this.interaction.deferReply();

    const hasPermissions = this.permissionCheck();
    if (!hasPermissions)
      return this.interaction.editReply({
        content: "Voc√™ n√£o tem permiss√£o para isso.",
      });

    const usu√°rio = this.interaction.options.getUser("usu√°rio");

    const db = await this.database?.find();
    db?.updateOne(
      { $set: { ["guild_users.$[outer].banned"]: true } },
      { arrayFilters: [{ "outer.user_id": usu√°rio?.id }] }
    );

    return await this.interaction.editReply({
      content: `O usu√°rio ${
        usu√°rio?.globalName ? usu√°rio.globalName : usu√°rio?.username
      } foi permanentemente banido de utilizar esse BOT dentro do servidor.`,
    });
  }

  async whitelist() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");

    const hasPermissions = this.permissionCheck();
    if (!hasPermissions)
      return this.interaction.editReply({
        content: "Voc√™ n√£o tem permiss√£o para isso.",
      });

    const db = await this.database?.find();

    const ban = db?.get(`guild_users.${this.user?.id}.banned`);

    if (!ban) {
      return await this.interaction.editReply({
        content: "Esse usu√°rio n√£o est√° na blacklist!",
      });
    }

    db?.set(`guild_users.${this.user?.id}.banned`, false);

    return await this.interaction.editReply({
      content: "Usu√°rio desbanido com sucesso.",
    });
  }

  validateOperation() {
    if (this.user?.id === this.interaction?.user.id) return false;

    if (this.user?.bot) return false;

    return true;
  }

  async adicionar() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");

    await this.interaction.deferReply();

    const validate = this.validateOperation();
    if (!validate) {
      return this.interaction.editReply({ content: "Opera√ß√£o inv√°lida." });
    }

    const db = await this.database?.find();

    const upda = db?.updateOne(
      {
        $push: {
          "guild_users.$[outer].reputation.comments": {
            $each: [
              {
                user_id: this.interaction.user.id,
                comment: this.comment,
                created_at: new Date(),
                positive: true,
              },
            ],
            $sort: {
              created_at: -1,
            },
          },
        },
        $inc: {
          "guild_users.$[outer].reputation.good_reps": 1,
        },
      },
      {
        upsert: true,
        arrayFilters: [{ "outer.user_id": this.user?.id }],
      }
    );
    console.log(upda);
    const embed = new BEmbed()
      .setAuthor({
        name: `${this.user?.globalName}ü§ù${this.interaction.user.globalName}`,
      })
      .setDescription(
        `**ü§ë | REPUTA√á√ÉO ADICIONADA!**\n${this.user?.globalName} recebeu um ponto de reputa√ß√£o de ${this.interaction.user.globalName}.\n${this.interaction.user.globalName} comentou: "${this.comment}"`
      )
      .setColor("Green");

    await this.interaction.editReply({
      embeds: [embed],
    });
  }

  async remover() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");

    await this.interaction.deferReply();

    const validate = this.validateOperation();
    if (!validate)
      return this.interaction.editReply({ content: "Opera√ß√£o inv√°lida." });

    const db = await this.database?.find();

    const dbUser = db?.get(`guild_users.$[outer].reputation.bad_reps`);
    if (!dbUser)
      return this.interaction.editReply({
        content: "[‚ùå] Este usu√°rio n√£o tem reputa√ß√£o alguma.",
      });

    db?.updateOne(
      {
        $push: {
          "guild_users.$[outer].reputation.comments": {
            $each: [
              {
                user_id: this.interaction.user.id,
                comment: this.comment,
                created_at: new Date(),
                positive: true,
              },
            ],
            $sort: {
              created_at: -1,
            },
          },
        },
        $inc: {
          "guild_users.$[outer].reputation.bad_reps": 1,
        },
      },
      {
        upsert: true,
        arrayFilters: [{ "outer.user_id": this.user?.id }],
      }
    );

    const embed = new BEmbed()
      .setAuthor({
        name: `${this.user?.globalName}üñï${this.interaction.user.globalName}`,
      })
      .setDescription(
        `**üí∏ | REPUTA√á√ÉO REMOVIDA!**\n$${this.interaction.user.globalName} removeu um ponto de reputa√ß√£o de ${this.user?.globalName}.\n${this.interaction.user.globalName} comentou: "${this.comment}"`
      )
      .setColor("Red");

    await this.interaction.editReply({
      embeds: [embed],
    });
  }

  async comentarios() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");

    await this.interaction.deferReply();

    const validate = this.validateOperation();

    if (!validate) {
      return this.interaction.editReply({ content: "Opera√ß√£o inv√°lida." });
    }

    const db = await this.database?.find();

    const dbUser = db?.get(`guild_users.$[outer].reputation`);
    if (!dbUser) {
      return this.interaction.editReply({
        content: "[‚ùå] Este usu√°rio n√£o tem reputa√ß√£o alguma.",
      });
    }

    const trustPercentage =
      (dbUser.good_reps / (dbUser.good_reps + dbUser.bad_Reps)) * 100;

    const confidenceLevels = [
      { range: [0, 20], level: "‚ö†Ô∏è Muito Baixa ‚ö†Ô∏è" },
      { range: [21, 40], level: "‚ö†Ô∏è Baixa" },
      { range: [41, 60], level: "Moderada" },
      { range: [61, 80], level: "Alta" },
      { range: [81, 100], level: "Muito Alta" },
    ];

    const trustLevel = confidenceLevels.find((level) => {
      const [min, max] = level.range;
      return trustPercentage >= min && trustPercentage <= max;
    });

    const embed = new BEmbed()
      .setAuthor({ name: this.user?.globalName ?? "Sem nick" })
      .setDescription(
        `‚úÖ ${dbUser.good_reps} Reputa√ß√µes boa(s)\n‚ùå ${
          dbUser.bad_Reps
        } Reputa√ß√µes ruim(s)\nüìú ${
          dbUser.comments.length
        } coment√°rio(s)\n‚ùì ${trustPercentage.toFixed(
          2
        )}% (${trustLevel?.level}).`
      )
      .setColor("Blurple");

    for (const comment of dbUser.comments.slice(0, 5)) {
      const fetchUser = await this.interaction.client?.users.fetch(
        comment.user_id
      );

      embed.addFields({
        name: fetchUser?.globalName ?? "Sem nick",
        value: `> \`${comment.positive ? "‚úÖ" : "‚ùå"} ${comment.comment}\``,
        inline: true,
      });
    }

    await this.interaction.editReply({ embeds: [embed] });
  }

  async execute() {
    if (!this.interaction || !this.client)
      return console.error("INTERACTION/CLIENT IS NOT DEFINED.");

    this.setMisc();

    switch (this.interaction.options.getSubcommand()) {
      case "ajuda":
        await this.ajuda();
        break;
      case "blacklist":
        await this.blacklist();
        break;
      case "whitelist":
        await this.whitelist();
        break;
      case "adicionar":
        await this.adicionar();
        break;
      case "remover":
        await this.remover();
        break;
      case "ver":
        await this.comentarios();
        break;
    }
  }
}

export default new Reputation();
